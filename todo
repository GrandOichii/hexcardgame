- matches backend
    - add winning / losing
    - add defence
    - add card summoning
    - figure out when need to update players
    - find out where should place emits (turn start, turn end, card draw, damage ...)
    - implement more complex cards (when dealing damage, every 3 turns ...)
    - add player logs (players should be updated with only the newest logs - add a special array of new logs to player controllers, when requesting to update, set as "newLogs", then clear out)
    - figure out what to do with cards that go to discard (life resetting)
    - implement power and cost pipelines
    - add cancelling of effects (use out variable)
    - implement bots (will be pretty hard, even the basic ones)

- create frontend (use python first, then better ui with c++/c#)
    - test front
        - write using python, will probably have to use the frame.py from previous card game project
    - actual front
        - figure out how to use the MonoGame pipeline (FONTS)
        - figure out the math of drawing players' hands as in an arc

- create back + front for managing cards
    - has to: manage cards, 
              manage expansions, 
              manage decks, 
              generate decks, 
              manage matches, 
              replaying recorded matches, 
              manage match configurations

- create html front
    - figure out how to draw hexagonal tiles
